在 Facebook 我们不分前端和后端，只分 product 和 infrastructure。做 product 的通常都是 full stack，不需要对特定的技术非常精通，但要求学习能力和灵活性足够好，不能只做自己 comfort zone 以内的事情，do whatever it takes to get your product shipped。通常聪明的应届生都会先进入 product，因为他们学什么都很快，也不会说浪费了在某个领域的积累。infrastructure 拥有更多各个领域的 specialist，前端只是其中之一。infrastructure 的客户就是 product，要做的事情就是让 product 开发实际产品时觉得爽，就这么简单。<a data-hash="ec03b8e839a6fb763e1b8113455362db" href="https://www.zhihu.com/people/ec03b8e839a6fb763e1b8113455362db" class="member_mention" data-editable="true" data-title="@winter" data-hovercard="p$b$ec03b8e839a6fb763e1b8113455362db">@winter</a> 提到「联调」，我想说我很久没听说过这个词了，因为这个词没有对应的英语版本，美国公司的产品开发过程通常不包括联调。product 要做什么，就自己学习对应的技术，学习公司内部的 infrastructure，然后调用公司内部的 API 就可以了。一个产品的逻辑，要分前端和后端两个团队的人实现，然后还要协调实现的结果，这我只在中国公司见过。当然这不仅仅要求公司 infrastructure 好，还要求有开放的文化。所谓联调，无非就是有些事情你自己做不了非要以来于别人帮你做，然后别人就会成为阻塞你的环节。（通常都是前端依赖后端，很少有说后端因为前端没完成就必须停下来等的。）这种做不了就停下来等的态度是不对的，不能说那是别人的问题就等别人解决。总之阻塞了产品发布的问题就是你的问题，无论需要你学习什么新技术，无论需要你编写和调试什么不熟悉的代码，do whatever it takes，just get the product launched。首先，我给 <a data-hash="11c4242fd92613a7f85ad9fff60c29c9" href="https://www.zhihu.com/people/11c4242fd92613a7f85ad9fff60c29c9" class="member_mention" data-editable="true" data-title="@Cat Chen" data-hovercard="p$b$11c4242fd92613a7f85ad9fff60c29c9">@Cat Chen</a>的答案点了赞，因为本司（百姓网）也采用Cat讲的Product/Infrastructure的分法，尽管我们还有许多不完善之处。一句话解释：我推崇前后端分离是在于技术架构上，而不是组织/流程、职位/工种的分离。如果人的能力强，当然可以full stack。且小团队肯定效率更高。反过来，跨部门联调这种事情，必定非常低效，且多后患，应极力避免。市场上有工作经验的技术人才往往只是熟悉某个特定领域，因为他过去积攒经验值的地方本来就是这样分工，从而限制了他成为full stack的可能——这是又一个鸡生蛋蛋生鸡的案例。另一个情况是，即使一个工程师在facebook的团队里可以full stack，但换个团队很可能就不行。 <a data-hash="11c4242fd92613a7f85ad9fff60c29c9" href="https://www.zhihu.com/people/11c4242fd92613a7f85ad9fff60c29c9" class="member_mention" data-editable="true" data-title="@Cat Chen" data-hovercard="p$b$11c4242fd92613a7f85ad9fff60c29c9">@Cat Chen</a> 提到了两个前提：infrastructure 好，开放的文化。两者缺一不可。小公司常缺前者，大公司常缺后者。本司后者很好，前者还不够完善但仍算OK。但是我们仍面临困难，这就是我要补充的第三个前提：合理的人员配比——这点容易理解，你可以不熟前（后）端，但是至少团队里有人是较为成熟的前（后）端，否则连能review你代码的人都找不到，成长就更无从谈起。我司最近就面临这样的情况，业务线发展太快导致新开项目的团队配不齐人。在这样的情况下，不得已就得放低要求，采取前后端分离的工作方式——是的，前后端分离的方式对人的要求是更低的。我认为必须给予工程师遵循自己兴趣和能力决定自己发展路径的自由和支持。技术架构若能很好的分层——比如良好的前后端分离，将有助于工程师进行纵深发展。而这反过来也可以促进横向发展，因为工程师可以更自由的在多个层面上转换。在 Facebook 我们不分前端和后端，只分 product 和 infrastructure。做 product 的通常都是 full stack，不需要对特定的技术非常精通，但要求学习能力和灵活性足够好，不能只做自己 comfort zone 以内的事情，do whatever it takes to get your product shipped。通常聪明的应届生都会先进入 product，因为他们学什么都很快，也不会说浪费了在某个领域的积累。infrastructure 拥有更多各个领域的 specialist，前端只是其中之一。infrastructure 的客户就是 product，要做的事情就是让 product 开发实际产品时觉得爽，就这么简单。<a data-hash="ec03b8e839a6fb763e1b8113455362db" href="https://www.zhihu.com/people/ec03b8e839a6fb763e1b8113455362db" class="member_mention" data-editable="true" data-title="@winter" data-hovercard="p$b$ec03b8e839a6fb763e1b8113455362db">@winter</a> 提到「联调」，我想说我很久没听说过这个词了，因为这个词没有对应的英语版本，美国公司的产品开发过程通常不包括联调。product 要做什么，就自己学习对应的技术，学习公司内部的 infrastructure，然后调用公司内部的 API 就可以了。一个产品的逻辑，要分前端和后端两个团队的人实现，然后还要协调实现的结果，这我只在中国公司见过。当然这不仅仅要求公司 infrastructure 好，还要求有开放的文化。所谓联调，无非就是有些事情你自己做不了非要以来于别人帮你做，然后别人就会成为阻塞你的环节。（通常都是前端依赖后端，很少有说后端因为前端没完成就必须停下来等的。）这种做不了就停下来等的态度是不对的，不能说那是别人的问题就等别人解决。总之阻塞了产品发布的问题就是你的问题，无论需要你学习什么新技术，无论需要你编写和调试什么不熟悉的代码，do whatever it takes，just get the product launched。首先，我给 <a data-hash="11c4242fd92613a7f85ad9fff60c29c9" href="https://www.zhihu.com/people/11c4242fd92613a7f85ad9fff60c29c9" class="member_mention" data-editable="true" data-title="@Cat Chen" data-hovercard="p$b$11c4242fd92613a7f85ad9fff60c29c9">@Cat Chen</a>的答案点了赞，因为本司（百姓网）也采用Cat讲的Product/Infrastructure的分法，尽管我们还有许多不完善之处。一句话解释：我推崇前后端分离是在于技术架构上，而不是组织/流程、职位/工种的分离。如果人的能力强，当然可以full stack。且小团队肯定效率更高。反过来，跨部门联调这种事情，必定非常低效，且多后患，应极力避免。市场上有工作经验的技术人才往往只是熟悉某个特定领域，因为他过去积攒经验值的地方本来就是这样分工，从而限制了他成为full stack的可能——这是又一个鸡生蛋蛋生鸡的案例。另一个情况是，即使一个工程师在facebook的团队里可以full stack，但换个团队很可能就不行。 <a data-hash="11c4242fd92613a7f85ad9fff60c29c9" href="https://www.zhihu.com/people/11c4242fd92613a7f85ad9fff60c29c9" class="member_mention" data-editable="true" data-title="@Cat Chen" data-hovercard="p$b$11c4242fd92613a7f85ad9fff60c29c9">@Cat Chen</a> 提到了两个前提：infrastructure 好，开放的文化。两者缺一不可。小公司常缺前者，大公司常缺后者。本司后者很好，前者还不够完善但仍算OK。但是我们仍面临困难，这就是我要补充的第三个前提：合理的人员配比——这点容易理解，你可以不熟前（后）端，但是至少团队里有人是较为成熟的前（后）端，否则连能review你代码的人都找不到，成长就更无从谈起。我司最近就面临这样的情况，业务线发展太快导致新开项目的团队配不齐人。在这样的情况下，不得已就得放低要求，采取前后端分离的工作方式——是的，前后端分离的方式对人的要求是更低的。我认为必须给予工程师遵循自己兴趣和能力决定自己发展路径的自由和支持。技术架构若能很好的分层——比如良好的前后端分离，将有助于工程师进行纵深发展。而这反过来也可以促进横向发展，因为工程师可以更自由的在多个层面上转换。